# docker-compose.yml

version: '3'

services:

  vault:
    image: vault:latest
    environment:
      VAULT_ADDR: http://localhost:8200
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_TOKEN:-test_token}
    hostname: vault
    container_name: vault
    ports:
      - 8200:8200
    cap_add:
      - IPC_LOCK
    command: vault server -dev -dev-no-store-token=true -log-level=debug -dev-listen-address=0.0.0.0:8200

  ssh_server:
    build:
      context: ssh
      dockerfile: Dockerfile.server
    hostname: ssh_server
    container_name: ssh_server
    environment:
      VAULT_ADDR: http://vault:8200
    volumes:
      - ./auth.py:/usr/local/bin/auth.py
    links:
      - vault
    command:
      - /bin/bash
      - -c
      - |
        # Wait for Vault server and Iinitialization of ssh_client
        sleep 20
        #
        # Prepare config for SSH-Helper...
        #
        cat << EOF > /etc/vault-ssh-helper.d/config.hcl
        vault_addr = "$$VAULT_ADDR"
        ssh_mount_point = "ssh"
        tls_skip_verify = true
        allowed_roles = "*"
        allowed_cidr_list = "0.0.0.0/0"
        EOF
        #
        # Retrieve CA Public key
        #
        curl -s $$VAULT_ADDR/v1/ssh/public_key > /etc/ssh/trusted-user-ca-keys.pem
        echo "TrustedUserCAKeys /etc/ssh/trusted-user-ca-keys.pem" >> /etc/ssh/sshd_config
        #
        # Below section fascilitates both Vault OTP login & Vault UserPass logon
        #
        sed -ie 's/@include common-auth/#@include common-auth/g' /etc/pam.d/sshd
        cat << EOF >> /etc/pam.d/sshd
        auth    [success=3 default=ignore]  pam_python.so /usr/local/bin/auth.py url=http://$$VAULT_ADDR nosslverify debug prompt="Vault_Or_Local_Password"
        auth    [success=2 default=ignore]  pam_unix.so nullok_secure
        auth    [success=1 default=ignore]  pam_exec.so quiet expose_authtok log=/tmp/vaultssh.log /usr/local/bin/vault-ssh-helper -dev -config=/etc/vault-ssh-helper.d/config.hcl
        auth    requisite                   pam_deny.so
        auth    required                    pam_permit.so
        EOF
        #
        echo "Starting SSH Server..."
        #
        rsyslogd &
        /usr/sbin/sshd -D   

  ssh_client:
    build:
      context: ssh
      dockerfile: Dockerfile.client
    hostname: ssh_client
    container_name: ssh_client
    environment:
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: ${VAULT_TOKEN:-test_token}
    links:
      - vault
      - ssh_server
    command:
      - /bin/bash
      - -c
      - |
        # Wait for Vault to initialize...
        sleep 5
        #
        echo "Initializing SSH Client..."
        #
        export SSH_SERVER=$$(getent hosts ssh_server | awk '{ print $$1 }')
        #
        vault secrets enable ssh
        #
        # SSH OTP Method...
        #
        vault write ssh/roles/otp_key_role key_type=otp default_user=user cidr_list=0.0.0.0/0
        vault write ssh/creds/otp_key_role ip=$${SSH_SERVER}
        echo 'alias ssh_server_otp="vault ssh -role otp_key_role -mode otp -strict-host-key-checking=no user@ssh_server"' >> ~/.bashrc
        #
        # SSH CRT Method...
        #
        vault write ssh/config/ca generate_signing_key=true
        #
        cat << EOF > /tmp/user-role.json
        {
          "allow_user_certificates": true,
          "allowed_users": "user",
          "default_extensions": [
            {
              "permit-pty": ""
            }
          ],
          "key_type": "ca",
          "default_user": "user",
          "ttl": "2m0s"
        }
        EOF
        #
        vault write ssh/roles/user-role @/tmp/user-role.json
        ssh-keygen -t rsa -C "user@ssh_client" -f ~/.ssh/id_rsa -q -N ''
        echo 'alias sign-cert="vault write -field=signed_key ssh/sign/user-role public_key=@$$HOME/.ssh/id_rsa.pub > ~/.ssh/signed-cert.pub"' >> ~/.bashrc
        echo 'alias sign-show="ssh-keygen -Lf ~/.ssh/signed-cert.pub"' >> ~/.bashrc
        echo 'alias ssh_server_crt="sign-cert && sign-show && ssh -o StrictHostKeyChecking=no -i ~/.ssh/signed-cert.pub -i ~/.ssh/id_rsa user@ssh_server"' >> ~/.bashrc
        #
        echo "SSH Client initialisation ready !"
        #
        tail -f /dev/null
